# 📦 패키지 설치
!pip install -q flask flask-cors requests beautifulsoup4 pyngrok lxml nest-asyncio

print("📦 패키지 설치 완료!")
print("🚀 서버를 시작합니다...\n")

# 🚀 서버 코드 및 실행
from flask import Flask, jsonify, request, render_template_string
from flask_cors import CORS
import os
import requests
import json
import time
from datetime import datetime, timedelta
import re
from bs4 import BeautifulSoup
from pyngrok import ngrok
import urllib.parse
import threading
import nest_asyncio

# Colab에서 비동기 실행을 위해 필요
nest_asyncio.apply()

app = Flask(__name__)
# CORS 설정 강화
CORS(app, resources={
    r"/api/*": {
        "origins": "*",
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
})

# API 키 설정
os.environ['NAVER_CLIENT_ID'] = 'fe9DLGhYbEVLy4sdQnVk'
os.environ['NAVER_CLIENT_SECRET'] = '2f0NEntTNN'
os.environ['NEWSAPI_KEY'] = 'a80b5826f01349c5824f4298d8f61eef'

# ngrok 인증 토큰 설정
ngrok.set_auth_token("30KyKWx0zSS7ZJpm5TnJOKdI6fC_7y1Lta8QCMEyH6ZLjjrxj")

# 카테고리 매핑
CATEGORIES = {
    '정치': '100',
    '경제': '101',
    '사회': '102',
    '생활문화': '103',
    '연예': '106',
    '스포츠': '107',
    '건강': '108',
    '오늘의추천': 'today'
}

# HTML 테스트 페이지 템플릿
TEST_PAGE_HTML = """
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>뉴스 AI 서버 테스트</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            overflow: hidden;
        }

        .header {
            background: #2c3e50;
            color: white;
            padding: 20px;
            text-align: center;
        }

        .header h1 {
            font-size: 2em;
            margin-bottom: 10px;
        }

        .controls {
            padding: 20px;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }

        .input-group {
            display: flex;
            gap: 10px;
            align-items: center;
            flex-wrap: wrap;
        }

        .input-group label {
            font-weight: bold;
            min-width: 100px;
        }

        .input-group select {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }

        .btn {
            padding: 10px 20px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.3s;
        }

        .btn:hover {
            background: #0056b3;
        }

        .btn-success { background: #28a745; }
        .btn-success:hover { background: #1e7e34; }

        .btn-warning { background: #ffc107; color: #212529; }
        .btn-warning:hover { background: #e0a800; }

        .results {
            padding: 20px;
        }

        .status {
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 20px;
        }

        .status.loading {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
        }

        .status.success {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .status.error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        .news-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .news-card {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            overflow: hidden;
            background: white;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .news-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .news-card img {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }

        .news-card .content {
            padding: 15px;
        }

        .news-card h3 {
            font-size: 16px;
            margin-bottom: 10px;
            line-height: 1.4;
        }

        .news-card p {
            font-size: 14px;
            color: #666;
            margin-bottom: 10px;
            line-height: 1.5;
        }

        .news-card .meta {
            font-size: 12px;
            color: #999;
            border-top: 1px solid #eee;
            padding-top: 10px;
        }

        .category-badge {
            display: inline-block;
            padding: 3px 8px;
            background: #007bff;
            color: white;
            border-radius: 12px;
            font-size: 11px;
            margin-right: 5px;
        }

        .json-viewer {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            white-space: pre-wrap;
            max-height: 400px;
            overflow-y: auto;
            margin-top: 15px;
        }

        .quick-tests {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 15px;
        }

        .placeholder-img {
            width: 100%;
            height: 200px;
            background: linear-gradient(45deg, #f0f0f0 25%, transparent 25%),
                        linear-gradient(-45deg, #f0f0f0 25%, transparent 25%),
                        linear-gradient(45deg, transparent 75%, #f0f0f0 75%),
                        linear-gradient(-45deg, transparent 75%, #f0f0f0 75%);
            background-size: 20px 20px;
            background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #999;
            font-size: 14px;
        }

        .server-info {
            background: #e9ecef;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🗞️ 뉴스 AI 서버 테스트</h1>
            <p>서버가 정상적으로 실행되고 있습니다!</p>
        </div>

        <div class="controls">
            <div class="server-info">
                <h3>📡 서버 정보</h3>
                <p><strong>현재 URL:</strong> {{ current_url }}</p>
                <p><strong>상태:</strong> <span style="color: green;">✅ 실행중</span></p>
                <p><strong>지원 카테고리:</strong> {{ categories|join(', ') }}</p>
            </div>

            <div class="input-group">
                <label for="category">카테고리:</label>
                <select id="category">
                    <option value="">전체 뉴스</option>
                    <option value="정치">정치</option>
                    <option value="경제">경제</option>
                    <option value="사회">사회</option>
                    <option value="생활문화">생활문화</option>
                    <option value="연예">연예</option>
                    <option value="스포츠">스포츠</option>
                    <option value="건강">건강</option>
                    <option value="오늘의추천">오늘의추천</option>
                </select>
                <button class="btn" onclick="fetchNews()">뉴스 가져오기</button>
                <button class="btn btn-warning" onclick="showJson()">JSON 보기</button>
            </div>

            <div class="quick-tests">
                <button class="btn btn-success" onclick="quickTest('categories')">카테고리 목록</button>
                <button class="btn" onclick="quickTest('정치')">정치 뉴스</button>
                <button class="btn" onclick="quickTest('경제')">경제 뉴스</button>
                <button class="btn" onclick="quickTest('연예')">연예 뉴스</button>
            </div>
        </div>

        <div class="results">
            <div id="status"></div>
            <div id="newsContainer"></div>
        </div>
    </div>

    <script>
        let currentData = null;
        const serverUrl = window.location.origin; // 현재 서버 URL 사용

        function showStatus(message, type = 'loading') {
            const status = document.getElementById('status');
            status.className = `status ${type}`;
            status.innerHTML = message;
        }

        async function fetchNews() {
            const category = document.getElementById('category').value;
            const endpoint = category ? `/api/news/${category}` : '/api/news';

            showStatus('뉴스를 가져오는 중...', 'loading');

            try {
                const response = await fetch(`${serverUrl}${endpoint}`);
                currentData = await response.json();

                if (response.ok) {
                    displayNews(currentData);
                    showStatus(`✅ 뉴스 로드 완료!`, 'success');
                } else {
                    showStatus(`❌ 오류: ${currentData.error || '알 수 없는 오류'}`, 'error');
                }
            } catch (error) {
                showStatus(`❌ 요청 실패: ${error.message}`, 'error');
            }
        }

        function displayNews(data) {
            const container = document.getElementById('newsContainer');

            if (data.category) {
                // 단일 카테고리
                const newsHtml = data.news.map(news => createNewsCard(news)).join('');
                container.innerHTML = `
                    <h2>📰 ${data.category} (${data.total}개)</h2>
                    <div class="news-grid">${newsHtml}</div>
                `;
            } else {
                // 전체 카테고리
                let html = '<h2>📰 전체 뉴스</h2>';
                for (const [category, newsList] of Object.entries(data)) {
                    const newsHtml = newsList.map(news => createNewsCard(news)).join('');
                    html += `
                        <h3 style="margin-top: 30px; margin-bottom: 15px;">🏷️ ${category} (${newsList.length}개)</h3>
                        <div class="news-grid">${newsHtml}</div>
                    `;
                }
                container.innerHTML = html;
            }
        }

        function createNewsCard(news) {
            const imageHtml = news.image_url
                ? `<img src="${news.image_url}" alt="뉴스 이미지" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                   <div class="placeholder-img" style="display: none;">이미지 없음</div>`
                : `<div class="placeholder-img">이미지 없음</div>`;

            return `
                <div class="news-card">
                    ${imageHtml}
                    <div class="content">
                        <h3>${news.title}</h3>
                        <p><strong>미리보기:</strong> ${news.preview_summary}</p>
                        ${news.detailed_summary ? `<p><strong>상세:</strong> ${news.detailed_summary}</p>` : ''}
                        <div class="meta">
                            <span class="category-badge">${news.category}</span>
                            <span>${new Date(news.pub_date).toLocaleString('ko-KR')}</span>
                            <br>
                            <a href="${news.link}" target="_blank" style="color: #007bff;">원문 보기</a>
                        </div>
                    </div>
                </div>
            `;
        }

        async function quickTest(test) {
            if (test === 'categories') {
                showStatus('카테고리 목록을 가져오는 중...', 'loading');
                try {
                    const response = await fetch(`${serverUrl}/api/categories`);
                    const categories = await response.json();
                    showStatus(`✅ 지원 카테고리: ${categories.join(', ')}`, 'success');
                } catch (error) {
                    showStatus(`❌ 오류: ${error.message}`, 'error');
                }
            } else {
                document.getElementById('category').value = test;
                await fetchNews();
            }
        }

        function showJson() {
            if (!currentData) {
                showStatus('먼저 뉴스를 가져와주세요.', 'error');
                return;
            }

            const container = document.getElementById('newsContainer');
            container.innerHTML = `
                <h2>📄 JSON 데이터</h2>
                <div class="json-viewer">${JSON.stringify(currentData, null, 2)}</div>
            `;
            showStatus('JSON 데이터를 표시했습니다.', 'success');
        }

        // 페이지 로드 시 자동으로 정치 뉴스 로드
        window.onload = function() {
            showStatus('서버가 정상적으로 실행중입니다.', 'success');
        };
    </script>
</body>
</html>
"""

class NewsService:
    def __init__(self):
        self.naver_client_id = os.environ.get('NAVER_CLIENT_ID')
        self.naver_client_secret = os.environ.get('NAVER_CLIENT_SECRET')
        self.newsapi_key = os.environ.get('NEWSAPI_KEY')

    def get_naver_news(self, category, count=5):
        """네이버 뉴스 API로 최신 뉴스 가져오기"""
        url = "https://openapi.naver.com/v1/search/news.json"

        query_map = {
            '정치': '정치',
            '경제': '경제',
            '사회': '사회',
            '생활문화': '생활 문화',
            '연예': '연예',
            '스포츠': '스포츠',
            '건강': '건강',
            '오늘의추천': '뉴스'
        }

        headers = {
            'X-Naver-Client-Id': self.naver_client_id,
            'X-Naver-Client-Secret': self.naver_client_secret
        }

        params = {
            'query': query_map.get(category, '뉴스'),
            'display': count,
            'start': 1,
            'sort': 'date'
        }

        try:
            response = requests.get(url, headers=headers, params=params)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"네이버 뉴스 API 오류: {e}")
            return None

    def extract_image_from_content(self, link):
        """뉴스 링크에서 대표 이미지 추출"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            response = requests.get(link, headers=headers, timeout=5)
            soup = BeautifulSoup(response.content, 'html.parser')

            img_selectors = [
                'meta[property="og:image"]',
                'meta[name="twitter:image"]',
                '.end_photo_org img',
                '.article_photo img',
                'article img',
                '.news_img img'
            ]

            for selector in img_selectors:
                img_tag = soup.select_one(selector)
                if img_tag:
                    if selector.startswith('meta'):
                        img_url = img_tag.get('content')
                    else:
                        img_url = img_tag.get('src')

                    if img_url and img_url.startswith('http'):
                        return img_url

            return None
        except Exception as e:
            return None

    def summarize_news(self, title, description, detail_type="preview"):
        """AI를 사용한 뉴스 요약"""
        try:
            content = f"{title} {description}"

            if detail_type == "preview":
                if len(content) > 50:
                    return content[:47] + "..."
                return content
            else:
                if len(content) > 150:
                    return content[:147] + "..."
                return content

        except Exception as e:
            return title[:50] + "..." if len(title) > 50 else title

news_service = NewsService()

# CORS 헤더를 모든 응답에 추가
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,POST,OPTIONS')
    return response

# 라우트 정의
@app.route('/')
def home():
    return jsonify({
        "message": "🗞️ 뉴스 추천 AI 서버가 실행중입니다!",
        "endpoints": {
            "/api/news/<category>": "카테고리별 뉴스 조회",
            "/api/news": "전체 카테고리 뉴스 조회",
            "/api/categories": "지원 카테고리 목록",
            "/test": "웹 테스트 페이지"
        },
        "categories": list(CATEGORIES.keys()),
        "status": "running"
    })

# 웹 테스트 페이지
@app.route('/test')
def test_page():
    return render_template_string(TEST_PAGE_HTML,
                                current_url=request.host_url,
                                categories=list(CATEGORIES.keys()))

@app.route('/api/news/<category>')
def get_news_by_category(category):
    """카테고리별 뉴스 조회"""
    if category not in CATEGORIES:
        return jsonify({"error": "지원하지 않는 카테고리입니다."}), 400

    news_data = news_service.get_naver_news(category)

    if not news_data or 'items' not in news_data:
        return jsonify({"error": "뉴스를 가져올 수 없습니다."}), 500

    processed_news = []
    for item in news_data['items'][:5]:
        title = re.sub(r'<[^>]+>', '', item['title'])
        description = re.sub(r'<[^>]+>', '', item['description'])

        image_url = None
        if len(processed_news) < 3:
            image_url = news_service.extract_image_from_content(item['link'])

        news_item = {
            "title": title,
            "description": description,
            "link": item['link'],
            "pub_date": item['pubDate'],
            "image_url": image_url,
            "preview_summary": news_service.summarize_news(title, description, "preview"),
            "detailed_summary": news_service.summarize_news(title, description, "detailed"),
            "category": category
        }
        processed_news.append(news_item)

    return jsonify({
        "category": category,
        "news": processed_news,
        "total": len(processed_news)
    })

@app.route('/api/news')
def get_all_categories():
    """모든 카테고리의 뉴스 조회"""
    all_news = {}

    for category in CATEGORIES.keys():
        news_data = news_service.get_naver_news(category, 3)

        if news_data and 'items' in news_data:
            processed_news = []
            for item in news_data['items'][:3]:
                title = re.sub(r'<[^>]+>', '', item['title'])
                description = re.sub(r'<[^>]+>', '', item['description'])

                news_item = {
                    "title": title,
                    "description": description,
                    "link": item['link'],
                    "pub_date": item['pubDate'],
                    "preview_summary": news_service.summarize_news(title, description, "preview"),
                    "category": category
                }
                processed_news.append(news_item)

            all_news[category] = processed_news

    return jsonify(all_news)

@app.route('/api/categories')
def get_categories():
    """지원하는 카테고리 목록"""
    return jsonify(list(CATEGORIES.keys()))

# OPTIONS 요청 처리 (CORS preflight)
@app.route('/api/<path:path>', methods=['OPTIONS'])
def options_handler(path):
    return '', 200

# 🌐 서버 실행 및 ngrok 터널 설정
try:
    # 기존 터널 종료
    ngrok.kill()

    # 새 터널 생성
    port = 8000
    public_url = ngrok.connect(port)

    print(f"🚀 서버가 시작됩니다!")
    print(f"📱 모바일 앱에서 사용할 URL: {public_url}")
    print(f"🔗 웹 테스트 페이지: {public_url}/test")
    print(f"📋 API 엔드포인트:")
    print(f"   - 전체 뉴스: {public_url}/api/news")
    print(f"   - 정치 뉴스: {public_url}/api/news/정치")
    print(f"   - 카테고리 목록: {public_url}/api/categories")
    print("\n" + "="*60)

    # Flask 서버를 백그라운드에서 실행
    def run_server():
        app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

    # 서버를 별도 스레드에서 실행
    server_thread = threading.Thread(target=run_server)
    server_thread.daemon = True
    server_thread.start()

    print("✅ 서버가 백그라운드에서 실행중입니다!")
    print(f"🌐 웹 테스트 페이지에서 바로 테스트하세요: {public_url}/test")

    # 서버 시작 대기
    time.sleep(3)

    print("\n🎉 서버 준비 완료!")
    print(f"📱 모바일 앱 연동 URL: {public_url}")
    print(f"🔗 웹 테스트: {public_url}/test")

except Exception as e:
    print(f"❌ 서버 시작 오류: {e}")
    print("💡 다시 실행해보세요.")
